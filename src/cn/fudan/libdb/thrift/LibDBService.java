/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.fudan.libdb.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-09-17")
public class LibDBService {

  public interface Iface {

    public int ping(int test) throws org.apache.thrift.TException;

    public java.lang.String queryLibsByGAV(java.lang.String groupName, java.lang.String artifactId, java.lang.String version, java.lang.String repoType, boolean jsonOutput, int limit) throws org.apache.thrift.TException;

    public FileInfo fetchLibByHash(java.lang.String hash) throws org.apache.thrift.TException;

    public FileInfo fetchApkByHash(java.lang.String hash) throws org.apache.thrift.TException;

    public FileInfo fetchApkByName(java.lang.String packageName, java.lang.String versionCode) throws org.apache.thrift.TException;

    public FileInfo fetchApkSrcByHash(java.lang.String hash) throws org.apache.thrift.TException;

    public FileInfo fetchApkSrcByName(java.lang.String packageName, java.lang.String versionCode) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(int test, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void queryLibsByGAV(java.lang.String groupName, java.lang.String artifactId, java.lang.String version, java.lang.String repoType, boolean jsonOutput, int limit, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void fetchLibByHash(java.lang.String hash, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException;

    public void fetchApkByHash(java.lang.String hash, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException;

    public void fetchApkByName(java.lang.String packageName, java.lang.String versionCode, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException;

    public void fetchApkSrcByHash(java.lang.String hash, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException;

    public void fetchApkSrcByName(java.lang.String packageName, java.lang.String versionCode, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int ping(int test) throws org.apache.thrift.TException
    {
      send_ping(test);
      return recv_ping();
    }

    public void send_ping(int test) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setTest(test);
      sendBase("ping", args);
    }

    public int recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public java.lang.String queryLibsByGAV(java.lang.String groupName, java.lang.String artifactId, java.lang.String version, java.lang.String repoType, boolean jsonOutput, int limit) throws org.apache.thrift.TException
    {
      send_queryLibsByGAV(groupName, artifactId, version, repoType, jsonOutput, limit);
      return recv_queryLibsByGAV();
    }

    public void send_queryLibsByGAV(java.lang.String groupName, java.lang.String artifactId, java.lang.String version, java.lang.String repoType, boolean jsonOutput, int limit) throws org.apache.thrift.TException
    {
      queryLibsByGAV_args args = new queryLibsByGAV_args();
      args.setGroupName(groupName);
      args.setArtifactId(artifactId);
      args.setVersion(version);
      args.setRepoType(repoType);
      args.setJsonOutput(jsonOutput);
      args.setLimit(limit);
      sendBase("queryLibsByGAV", args);
    }

    public java.lang.String recv_queryLibsByGAV() throws org.apache.thrift.TException
    {
      queryLibsByGAV_result result = new queryLibsByGAV_result();
      receiveBase(result, "queryLibsByGAV");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryLibsByGAV failed: unknown result");
    }

    public FileInfo fetchLibByHash(java.lang.String hash) throws org.apache.thrift.TException
    {
      send_fetchLibByHash(hash);
      return recv_fetchLibByHash();
    }

    public void send_fetchLibByHash(java.lang.String hash) throws org.apache.thrift.TException
    {
      fetchLibByHash_args args = new fetchLibByHash_args();
      args.setHash(hash);
      sendBase("fetchLibByHash", args);
    }

    public FileInfo recv_fetchLibByHash() throws org.apache.thrift.TException
    {
      fetchLibByHash_result result = new fetchLibByHash_result();
      receiveBase(result, "fetchLibByHash");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchLibByHash failed: unknown result");
    }

    public FileInfo fetchApkByHash(java.lang.String hash) throws org.apache.thrift.TException
    {
      send_fetchApkByHash(hash);
      return recv_fetchApkByHash();
    }

    public void send_fetchApkByHash(java.lang.String hash) throws org.apache.thrift.TException
    {
      fetchApkByHash_args args = new fetchApkByHash_args();
      args.setHash(hash);
      sendBase("fetchApkByHash", args);
    }

    public FileInfo recv_fetchApkByHash() throws org.apache.thrift.TException
    {
      fetchApkByHash_result result = new fetchApkByHash_result();
      receiveBase(result, "fetchApkByHash");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchApkByHash failed: unknown result");
    }

    public FileInfo fetchApkByName(java.lang.String packageName, java.lang.String versionCode) throws org.apache.thrift.TException
    {
      send_fetchApkByName(packageName, versionCode);
      return recv_fetchApkByName();
    }

    public void send_fetchApkByName(java.lang.String packageName, java.lang.String versionCode) throws org.apache.thrift.TException
    {
      fetchApkByName_args args = new fetchApkByName_args();
      args.setPackageName(packageName);
      args.setVersionCode(versionCode);
      sendBase("fetchApkByName", args);
    }

    public FileInfo recv_fetchApkByName() throws org.apache.thrift.TException
    {
      fetchApkByName_result result = new fetchApkByName_result();
      receiveBase(result, "fetchApkByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchApkByName failed: unknown result");
    }

    public FileInfo fetchApkSrcByHash(java.lang.String hash) throws org.apache.thrift.TException
    {
      send_fetchApkSrcByHash(hash);
      return recv_fetchApkSrcByHash();
    }

    public void send_fetchApkSrcByHash(java.lang.String hash) throws org.apache.thrift.TException
    {
      fetchApkSrcByHash_args args = new fetchApkSrcByHash_args();
      args.setHash(hash);
      sendBase("fetchApkSrcByHash", args);
    }

    public FileInfo recv_fetchApkSrcByHash() throws org.apache.thrift.TException
    {
      fetchApkSrcByHash_result result = new fetchApkSrcByHash_result();
      receiveBase(result, "fetchApkSrcByHash");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchApkSrcByHash failed: unknown result");
    }

    public FileInfo fetchApkSrcByName(java.lang.String packageName, java.lang.String versionCode) throws org.apache.thrift.TException
    {
      send_fetchApkSrcByName(packageName, versionCode);
      return recv_fetchApkSrcByName();
    }

    public void send_fetchApkSrcByName(java.lang.String packageName, java.lang.String versionCode) throws org.apache.thrift.TException
    {
      fetchApkSrcByName_args args = new fetchApkSrcByName_args();
      args.setPackageName(packageName);
      args.setVersionCode(versionCode);
      sendBase("fetchApkSrcByName", args);
    }

    public FileInfo recv_fetchApkSrcByName() throws org.apache.thrift.TException
    {
      fetchApkSrcByName_result result = new fetchApkSrcByName_result();
      receiveBase(result, "fetchApkSrcByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchApkSrcByName failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(int test, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(test, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int test;
      public ping_call(int test, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.test = test;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setTest(test);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void queryLibsByGAV(java.lang.String groupName, java.lang.String artifactId, java.lang.String version, java.lang.String repoType, boolean jsonOutput, int limit, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryLibsByGAV_call method_call = new queryLibsByGAV_call(groupName, artifactId, version, repoType, jsonOutput, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryLibsByGAV_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String groupName;
      private java.lang.String artifactId;
      private java.lang.String version;
      private java.lang.String repoType;
      private boolean jsonOutput;
      private int limit;
      public queryLibsByGAV_call(java.lang.String groupName, java.lang.String artifactId, java.lang.String version, java.lang.String repoType, boolean jsonOutput, int limit, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupName = groupName;
        this.artifactId = artifactId;
        this.version = version;
        this.repoType = repoType;
        this.jsonOutput = jsonOutput;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryLibsByGAV", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryLibsByGAV_args args = new queryLibsByGAV_args();
        args.setGroupName(groupName);
        args.setArtifactId(artifactId);
        args.setVersion(version);
        args.setRepoType(repoType);
        args.setJsonOutput(jsonOutput);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryLibsByGAV();
      }
    }

    public void fetchLibByHash(java.lang.String hash, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchLibByHash_call method_call = new fetchLibByHash_call(hash, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchLibByHash_call extends org.apache.thrift.async.TAsyncMethodCall<FileInfo> {
      private java.lang.String hash;
      public fetchLibByHash_call(java.lang.String hash, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hash = hash;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchLibByHash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchLibByHash_args args = new fetchLibByHash_args();
        args.setHash(hash);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FileInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchLibByHash();
      }
    }

    public void fetchApkByHash(java.lang.String hash, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchApkByHash_call method_call = new fetchApkByHash_call(hash, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchApkByHash_call extends org.apache.thrift.async.TAsyncMethodCall<FileInfo> {
      private java.lang.String hash;
      public fetchApkByHash_call(java.lang.String hash, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hash = hash;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchApkByHash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchApkByHash_args args = new fetchApkByHash_args();
        args.setHash(hash);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FileInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchApkByHash();
      }
    }

    public void fetchApkByName(java.lang.String packageName, java.lang.String versionCode, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchApkByName_call method_call = new fetchApkByName_call(packageName, versionCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchApkByName_call extends org.apache.thrift.async.TAsyncMethodCall<FileInfo> {
      private java.lang.String packageName;
      private java.lang.String versionCode;
      public fetchApkByName_call(java.lang.String packageName, java.lang.String versionCode, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.packageName = packageName;
        this.versionCode = versionCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchApkByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchApkByName_args args = new fetchApkByName_args();
        args.setPackageName(packageName);
        args.setVersionCode(versionCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FileInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchApkByName();
      }
    }

    public void fetchApkSrcByHash(java.lang.String hash, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchApkSrcByHash_call method_call = new fetchApkSrcByHash_call(hash, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchApkSrcByHash_call extends org.apache.thrift.async.TAsyncMethodCall<FileInfo> {
      private java.lang.String hash;
      public fetchApkSrcByHash_call(java.lang.String hash, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hash = hash;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchApkSrcByHash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchApkSrcByHash_args args = new fetchApkSrcByHash_args();
        args.setHash(hash);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FileInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchApkSrcByHash();
      }
    }

    public void fetchApkSrcByName(java.lang.String packageName, java.lang.String versionCode, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchApkSrcByName_call method_call = new fetchApkSrcByName_call(packageName, versionCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchApkSrcByName_call extends org.apache.thrift.async.TAsyncMethodCall<FileInfo> {
      private java.lang.String packageName;
      private java.lang.String versionCode;
      public fetchApkSrcByName_call(java.lang.String packageName, java.lang.String versionCode, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.packageName = packageName;
        this.versionCode = versionCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchApkSrcByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchApkSrcByName_args args = new fetchApkSrcByName_args();
        args.setPackageName(packageName);
        args.setVersionCode(versionCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FileInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchApkSrcByName();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("queryLibsByGAV", new queryLibsByGAV());
      processMap.put("fetchLibByHash", new fetchLibByHash());
      processMap.put("fetchApkByHash", new fetchApkByHash());
      processMap.put("fetchApkByName", new fetchApkByName());
      processMap.put("fetchApkSrcByHash", new fetchApkSrcByHash());
      processMap.put("fetchApkSrcByName", new fetchApkSrcByName());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping(args.test);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryLibsByGAV<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryLibsByGAV_args> {
      public queryLibsByGAV() {
        super("queryLibsByGAV");
      }

      public queryLibsByGAV_args getEmptyArgsInstance() {
        return new queryLibsByGAV_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public queryLibsByGAV_result getResult(I iface, queryLibsByGAV_args args) throws org.apache.thrift.TException {
        queryLibsByGAV_result result = new queryLibsByGAV_result();
        result.success = iface.queryLibsByGAV(args.groupName, args.artifactId, args.version, args.repoType, args.jsonOutput, args.limit);
        return result;
      }
    }

    public static class fetchLibByHash<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchLibByHash_args> {
      public fetchLibByHash() {
        super("fetchLibByHash");
      }

      public fetchLibByHash_args getEmptyArgsInstance() {
        return new fetchLibByHash_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public fetchLibByHash_result getResult(I iface, fetchLibByHash_args args) throws org.apache.thrift.TException {
        fetchLibByHash_result result = new fetchLibByHash_result();
        result.success = iface.fetchLibByHash(args.hash);
        return result;
      }
    }

    public static class fetchApkByHash<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchApkByHash_args> {
      public fetchApkByHash() {
        super("fetchApkByHash");
      }

      public fetchApkByHash_args getEmptyArgsInstance() {
        return new fetchApkByHash_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public fetchApkByHash_result getResult(I iface, fetchApkByHash_args args) throws org.apache.thrift.TException {
        fetchApkByHash_result result = new fetchApkByHash_result();
        result.success = iface.fetchApkByHash(args.hash);
        return result;
      }
    }

    public static class fetchApkByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchApkByName_args> {
      public fetchApkByName() {
        super("fetchApkByName");
      }

      public fetchApkByName_args getEmptyArgsInstance() {
        return new fetchApkByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public fetchApkByName_result getResult(I iface, fetchApkByName_args args) throws org.apache.thrift.TException {
        fetchApkByName_result result = new fetchApkByName_result();
        result.success = iface.fetchApkByName(args.packageName, args.versionCode);
        return result;
      }
    }

    public static class fetchApkSrcByHash<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchApkSrcByHash_args> {
      public fetchApkSrcByHash() {
        super("fetchApkSrcByHash");
      }

      public fetchApkSrcByHash_args getEmptyArgsInstance() {
        return new fetchApkSrcByHash_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public fetchApkSrcByHash_result getResult(I iface, fetchApkSrcByHash_args args) throws org.apache.thrift.TException {
        fetchApkSrcByHash_result result = new fetchApkSrcByHash_result();
        result.success = iface.fetchApkSrcByHash(args.hash);
        return result;
      }
    }

    public static class fetchApkSrcByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchApkSrcByName_args> {
      public fetchApkSrcByName() {
        super("fetchApkSrcByName");
      }

      public fetchApkSrcByName_args getEmptyArgsInstance() {
        return new fetchApkSrcByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public fetchApkSrcByName_result getResult(I iface, fetchApkSrcByName_args args) throws org.apache.thrift.TException {
        fetchApkSrcByName_result result = new fetchApkSrcByName_result();
        result.success = iface.fetchApkSrcByName(args.packageName, args.versionCode);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("queryLibsByGAV", new queryLibsByGAV());
      processMap.put("fetchLibByHash", new fetchLibByHash());
      processMap.put("fetchApkByHash", new fetchApkByHash());
      processMap.put("fetchApkByName", new fetchApkByName());
      processMap.put("fetchApkSrcByHash", new fetchApkSrcByHash());
      processMap.put("fetchApkSrcByName", new fetchApkSrcByName());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, java.lang.Integer> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            ping_result result = new ping_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.ping(args.test,resultHandler);
      }
    }

    public static class queryLibsByGAV<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryLibsByGAV_args, java.lang.String> {
      public queryLibsByGAV() {
        super("queryLibsByGAV");
      }

      public queryLibsByGAV_args getEmptyArgsInstance() {
        return new queryLibsByGAV_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            queryLibsByGAV_result result = new queryLibsByGAV_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryLibsByGAV_result result = new queryLibsByGAV_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryLibsByGAV_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.queryLibsByGAV(args.groupName, args.artifactId, args.version, args.repoType, args.jsonOutput, args.limit,resultHandler);
      }
    }

    public static class fetchLibByHash<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchLibByHash_args, FileInfo> {
      public fetchLibByHash() {
        super("fetchLibByHash");
      }

      public fetchLibByHash_args getEmptyArgsInstance() {
        return new fetchLibByHash_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<FileInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<FileInfo>() { 
          public void onComplete(FileInfo o) {
            fetchLibByHash_result result = new fetchLibByHash_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchLibByHash_result result = new fetchLibByHash_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchLibByHash_args args, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException {
        iface.fetchLibByHash(args.hash,resultHandler);
      }
    }

    public static class fetchApkByHash<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchApkByHash_args, FileInfo> {
      public fetchApkByHash() {
        super("fetchApkByHash");
      }

      public fetchApkByHash_args getEmptyArgsInstance() {
        return new fetchApkByHash_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<FileInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<FileInfo>() { 
          public void onComplete(FileInfo o) {
            fetchApkByHash_result result = new fetchApkByHash_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchApkByHash_result result = new fetchApkByHash_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchApkByHash_args args, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException {
        iface.fetchApkByHash(args.hash,resultHandler);
      }
    }

    public static class fetchApkByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchApkByName_args, FileInfo> {
      public fetchApkByName() {
        super("fetchApkByName");
      }

      public fetchApkByName_args getEmptyArgsInstance() {
        return new fetchApkByName_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<FileInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<FileInfo>() { 
          public void onComplete(FileInfo o) {
            fetchApkByName_result result = new fetchApkByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchApkByName_result result = new fetchApkByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchApkByName_args args, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException {
        iface.fetchApkByName(args.packageName, args.versionCode,resultHandler);
      }
    }

    public static class fetchApkSrcByHash<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchApkSrcByHash_args, FileInfo> {
      public fetchApkSrcByHash() {
        super("fetchApkSrcByHash");
      }

      public fetchApkSrcByHash_args getEmptyArgsInstance() {
        return new fetchApkSrcByHash_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<FileInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<FileInfo>() { 
          public void onComplete(FileInfo o) {
            fetchApkSrcByHash_result result = new fetchApkSrcByHash_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchApkSrcByHash_result result = new fetchApkSrcByHash_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchApkSrcByHash_args args, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException {
        iface.fetchApkSrcByHash(args.hash,resultHandler);
      }
    }

    public static class fetchApkSrcByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchApkSrcByName_args, FileInfo> {
      public fetchApkSrcByName() {
        super("fetchApkSrcByName");
      }

      public fetchApkSrcByName_args getEmptyArgsInstance() {
        return new fetchApkSrcByName_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<FileInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<FileInfo>() { 
          public void onComplete(FileInfo o) {
            fetchApkSrcByName_result result = new fetchApkSrcByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchApkSrcByName_result result = new fetchApkSrcByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchApkSrcByName_args args, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws org.apache.thrift.TException {
        iface.fetchApkSrcByName(args.packageName, args.versionCode,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField TEST_FIELD_DESC = new org.apache.thrift.protocol.TField("test", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();

    public int test; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEST((short)1, "test");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEST
            return TEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEST_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEST, new org.apache.thrift.meta_data.FieldMetaData("test", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      int test)
    {
      this();
      this.test = test;
      setTestIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.test = other.test;
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
      setTestIsSet(false);
      this.test = 0;
    }

    public int getTest() {
      return this.test;
    }

    public ping_args setTest(int test) {
      this.test = test;
      setTestIsSet(true);
      return this;
    }

    public void unsetTest() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TEST_ISSET_ID);
    }

    /** Returns true if field test is set (has been assigned a value) and false otherwise */
    public boolean isSetTest() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TEST_ISSET_ID);
    }

    public void setTestIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TEST_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TEST:
        if (value == null) {
          unsetTest();
        } else {
          setTest((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TEST:
        return getTest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TEST:
        return isSetTest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_test = true;
      boolean that_present_test = true;
      if (this_present_test || that_present_test) {
        if (!(this_present_test && that_present_test))
          return false;
        if (this.test != that.test)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + test;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTest()).compareTo(other.isSetTest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.test, other.test);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append("test:");
      sb.append(this.test);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEST
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.test = iprot.readI32();
                struct.setTestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEST_FIELD_DESC);
        oprot.writeI32(struct.test);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTest()) {
          oprot.writeI32(struct.test);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.test = iprot.readI32();
          struct.setTestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryLibsByGAV_args implements org.apache.thrift.TBase<queryLibsByGAV_args, queryLibsByGAV_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryLibsByGAV_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryLibsByGAV_args");

    private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARTIFACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("artifactId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REPO_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repoType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField JSON_OUTPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonOutput", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryLibsByGAV_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryLibsByGAV_argsTupleSchemeFactory();

    public java.lang.String groupName; // required
    public java.lang.String artifactId; // required
    public java.lang.String version; // required
    public java.lang.String repoType; // required
    public boolean jsonOutput; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_NAME((short)1, "groupName"),
      ARTIFACT_ID((short)2, "artifactId"),
      VERSION((short)3, "version"),
      REPO_TYPE((short)4, "repoType"),
      JSON_OUTPUT((short)5, "jsonOutput"),
      LIMIT((short)6, "limit");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_NAME
            return GROUP_NAME;
          case 2: // ARTIFACT_ID
            return ARTIFACT_ID;
          case 3: // VERSION
            return VERSION;
          case 4: // REPO_TYPE
            return REPO_TYPE;
          case 5: // JSON_OUTPUT
            return JSON_OUTPUT;
          case 6: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __JSONOUTPUT_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARTIFACT_ID, new org.apache.thrift.meta_data.FieldMetaData("artifactId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPO_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repoType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_OUTPUT, new org.apache.thrift.meta_data.FieldMetaData("jsonOutput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryLibsByGAV_args.class, metaDataMap);
    }

    public queryLibsByGAV_args() {
    }

    public queryLibsByGAV_args(
      java.lang.String groupName,
      java.lang.String artifactId,
      java.lang.String version,
      java.lang.String repoType,
      boolean jsonOutput,
      int limit)
    {
      this();
      this.groupName = groupName;
      this.artifactId = artifactId;
      this.version = version;
      this.repoType = repoType;
      this.jsonOutput = jsonOutput;
      setJsonOutputIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryLibsByGAV_args(queryLibsByGAV_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGroupName()) {
        this.groupName = other.groupName;
      }
      if (other.isSetArtifactId()) {
        this.artifactId = other.artifactId;
      }
      if (other.isSetVersion()) {
        this.version = other.version;
      }
      if (other.isSetRepoType()) {
        this.repoType = other.repoType;
      }
      this.jsonOutput = other.jsonOutput;
      this.limit = other.limit;
    }

    public queryLibsByGAV_args deepCopy() {
      return new queryLibsByGAV_args(this);
    }

    @Override
    public void clear() {
      this.groupName = null;
      this.artifactId = null;
      this.version = null;
      this.repoType = null;
      setJsonOutputIsSet(false);
      this.jsonOutput = false;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public java.lang.String getGroupName() {
      return this.groupName;
    }

    public queryLibsByGAV_args setGroupName(java.lang.String groupName) {
      this.groupName = groupName;
      return this;
    }

    public void unsetGroupName() {
      this.groupName = null;
    }

    /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupName() {
      return this.groupName != null;
    }

    public void setGroupNameIsSet(boolean value) {
      if (!value) {
        this.groupName = null;
      }
    }

    public java.lang.String getArtifactId() {
      return this.artifactId;
    }

    public queryLibsByGAV_args setArtifactId(java.lang.String artifactId) {
      this.artifactId = artifactId;
      return this;
    }

    public void unsetArtifactId() {
      this.artifactId = null;
    }

    /** Returns true if field artifactId is set (has been assigned a value) and false otherwise */
    public boolean isSetArtifactId() {
      return this.artifactId != null;
    }

    public void setArtifactIdIsSet(boolean value) {
      if (!value) {
        this.artifactId = null;
      }
    }

    public java.lang.String getVersion() {
      return this.version;
    }

    public queryLibsByGAV_args setVersion(java.lang.String version) {
      this.version = version;
      return this;
    }

    public void unsetVersion() {
      this.version = null;
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return this.version != null;
    }

    public void setVersionIsSet(boolean value) {
      if (!value) {
        this.version = null;
      }
    }

    public java.lang.String getRepoType() {
      return this.repoType;
    }

    public queryLibsByGAV_args setRepoType(java.lang.String repoType) {
      this.repoType = repoType;
      return this;
    }

    public void unsetRepoType() {
      this.repoType = null;
    }

    /** Returns true if field repoType is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoType() {
      return this.repoType != null;
    }

    public void setRepoTypeIsSet(boolean value) {
      if (!value) {
        this.repoType = null;
      }
    }

    public boolean isJsonOutput() {
      return this.jsonOutput;
    }

    public queryLibsByGAV_args setJsonOutput(boolean jsonOutput) {
      this.jsonOutput = jsonOutput;
      setJsonOutputIsSet(true);
      return this;
    }

    public void unsetJsonOutput() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JSONOUTPUT_ISSET_ID);
    }

    /** Returns true if field jsonOutput is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonOutput() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JSONOUTPUT_ISSET_ID);
    }

    public void setJsonOutputIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JSONOUTPUT_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public queryLibsByGAV_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case GROUP_NAME:
        if (value == null) {
          unsetGroupName();
        } else {
          setGroupName((java.lang.String)value);
        }
        break;

      case ARTIFACT_ID:
        if (value == null) {
          unsetArtifactId();
        } else {
          setArtifactId((java.lang.String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((java.lang.String)value);
        }
        break;

      case REPO_TYPE:
        if (value == null) {
          unsetRepoType();
        } else {
          setRepoType((java.lang.String)value);
        }
        break;

      case JSON_OUTPUT:
        if (value == null) {
          unsetJsonOutput();
        } else {
          setJsonOutput((java.lang.Boolean)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_NAME:
        return getGroupName();

      case ARTIFACT_ID:
        return getArtifactId();

      case VERSION:
        return getVersion();

      case REPO_TYPE:
        return getRepoType();

      case JSON_OUTPUT:
        return isJsonOutput();

      case LIMIT:
        return getLimit();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GROUP_NAME:
        return isSetGroupName();
      case ARTIFACT_ID:
        return isSetArtifactId();
      case VERSION:
        return isSetVersion();
      case REPO_TYPE:
        return isSetRepoType();
      case JSON_OUTPUT:
        return isSetJsonOutput();
      case LIMIT:
        return isSetLimit();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryLibsByGAV_args)
        return this.equals((queryLibsByGAV_args)that);
      return false;
    }

    public boolean equals(queryLibsByGAV_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupName = true && this.isSetGroupName();
      boolean that_present_groupName = true && that.isSetGroupName();
      if (this_present_groupName || that_present_groupName) {
        if (!(this_present_groupName && that_present_groupName))
          return false;
        if (!this.groupName.equals(that.groupName))
          return false;
      }

      boolean this_present_artifactId = true && this.isSetArtifactId();
      boolean that_present_artifactId = true && that.isSetArtifactId();
      if (this_present_artifactId || that_present_artifactId) {
        if (!(this_present_artifactId && that_present_artifactId))
          return false;
        if (!this.artifactId.equals(that.artifactId))
          return false;
      }

      boolean this_present_version = true && this.isSetVersion();
      boolean that_present_version = true && that.isSetVersion();
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (!this.version.equals(that.version))
          return false;
      }

      boolean this_present_repoType = true && this.isSetRepoType();
      boolean that_present_repoType = true && that.isSetRepoType();
      if (this_present_repoType || that_present_repoType) {
        if (!(this_present_repoType && that_present_repoType))
          return false;
        if (!this.repoType.equals(that.repoType))
          return false;
      }

      boolean this_present_jsonOutput = true;
      boolean that_present_jsonOutput = true;
      if (this_present_jsonOutput || that_present_jsonOutput) {
        if (!(this_present_jsonOutput && that_present_jsonOutput))
          return false;
        if (this.jsonOutput != that.jsonOutput)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGroupName()) ? 131071 : 524287);
      if (isSetGroupName())
        hashCode = hashCode * 8191 + groupName.hashCode();

      hashCode = hashCode * 8191 + ((isSetArtifactId()) ? 131071 : 524287);
      if (isSetArtifactId())
        hashCode = hashCode * 8191 + artifactId.hashCode();

      hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
      if (isSetVersion())
        hashCode = hashCode * 8191 + version.hashCode();

      hashCode = hashCode * 8191 + ((isSetRepoType()) ? 131071 : 524287);
      if (isSetRepoType())
        hashCode = hashCode * 8191 + repoType.hashCode();

      hashCode = hashCode * 8191 + ((jsonOutput) ? 131071 : 524287);

      hashCode = hashCode * 8191 + limit;

      return hashCode;
    }

    @Override
    public int compareTo(queryLibsByGAV_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, other.groupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArtifactId()).compareTo(other.isSetArtifactId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArtifactId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artifactId, other.artifactId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRepoType()).compareTo(other.isSetRepoType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repoType, other.repoType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonOutput()).compareTo(other.isSetJsonOutput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonOutput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonOutput, other.jsonOutput);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryLibsByGAV_args(");
      boolean first = true;

      sb.append("groupName:");
      if (this.groupName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("artifactId:");
      if (this.artifactId == null) {
        sb.append("null");
      } else {
        sb.append(this.artifactId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repoType:");
      if (this.repoType == null) {
        sb.append("null");
      } else {
        sb.append(this.repoType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonOutput:");
      sb.append(this.jsonOutput);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryLibsByGAV_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryLibsByGAV_argsStandardScheme getScheme() {
        return new queryLibsByGAV_argsStandardScheme();
      }
    }

    private static class queryLibsByGAV_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryLibsByGAV_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryLibsByGAV_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupName = iprot.readString();
                struct.setGroupNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARTIFACT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.artifactId = iprot.readString();
                struct.setArtifactIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.version = iprot.readString();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REPO_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repoType = iprot.readString();
                struct.setRepoTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // JSON_OUTPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.jsonOutput = iprot.readBool();
                struct.setJsonOutputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryLibsByGAV_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupName != null) {
          oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
          oprot.writeString(struct.groupName);
          oprot.writeFieldEnd();
        }
        if (struct.artifactId != null) {
          oprot.writeFieldBegin(ARTIFACT_ID_FIELD_DESC);
          oprot.writeString(struct.artifactId);
          oprot.writeFieldEnd();
        }
        if (struct.version != null) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
        if (struct.repoType != null) {
          oprot.writeFieldBegin(REPO_TYPE_FIELD_DESC);
          oprot.writeString(struct.repoType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(JSON_OUTPUT_FIELD_DESC);
        oprot.writeBool(struct.jsonOutput);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryLibsByGAV_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryLibsByGAV_argsTupleScheme getScheme() {
        return new queryLibsByGAV_argsTupleScheme();
      }
    }

    private static class queryLibsByGAV_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryLibsByGAV_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryLibsByGAV_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGroupName()) {
          optionals.set(0);
        }
        if (struct.isSetArtifactId()) {
          optionals.set(1);
        }
        if (struct.isSetVersion()) {
          optionals.set(2);
        }
        if (struct.isSetRepoType()) {
          optionals.set(3);
        }
        if (struct.isSetJsonOutput()) {
          optionals.set(4);
        }
        if (struct.isSetLimit()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetGroupName()) {
          oprot.writeString(struct.groupName);
        }
        if (struct.isSetArtifactId()) {
          oprot.writeString(struct.artifactId);
        }
        if (struct.isSetVersion()) {
          oprot.writeString(struct.version);
        }
        if (struct.isSetRepoType()) {
          oprot.writeString(struct.repoType);
        }
        if (struct.isSetJsonOutput()) {
          oprot.writeBool(struct.jsonOutput);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryLibsByGAV_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.groupName = iprot.readString();
          struct.setGroupNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.artifactId = iprot.readString();
          struct.setArtifactIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.version = iprot.readString();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.repoType = iprot.readString();
          struct.setRepoTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.jsonOutput = iprot.readBool();
          struct.setJsonOutputIsSet(true);
        }
        if (incoming.get(5)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryLibsByGAV_result implements org.apache.thrift.TBase<queryLibsByGAV_result, queryLibsByGAV_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryLibsByGAV_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryLibsByGAV_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryLibsByGAV_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryLibsByGAV_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryLibsByGAV_result.class, metaDataMap);
    }

    public queryLibsByGAV_result() {
    }

    public queryLibsByGAV_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryLibsByGAV_result(queryLibsByGAV_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryLibsByGAV_result deepCopy() {
      return new queryLibsByGAV_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public queryLibsByGAV_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryLibsByGAV_result)
        return this.equals((queryLibsByGAV_result)that);
      return false;
    }

    public boolean equals(queryLibsByGAV_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryLibsByGAV_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryLibsByGAV_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryLibsByGAV_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryLibsByGAV_resultStandardScheme getScheme() {
        return new queryLibsByGAV_resultStandardScheme();
      }
    }

    private static class queryLibsByGAV_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryLibsByGAV_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryLibsByGAV_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryLibsByGAV_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryLibsByGAV_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryLibsByGAV_resultTupleScheme getScheme() {
        return new queryLibsByGAV_resultTupleScheme();
      }
    }

    private static class queryLibsByGAV_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryLibsByGAV_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryLibsByGAV_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryLibsByGAV_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchLibByHash_args implements org.apache.thrift.TBase<fetchLibByHash_args, fetchLibByHash_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchLibByHash_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchLibByHash_args");

    private static final org.apache.thrift.protocol.TField HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("hash", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchLibByHash_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchLibByHash_argsTupleSchemeFactory();

    public java.lang.String hash; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HASH((short)1, "hash");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HASH
            return HASH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HASH, new org.apache.thrift.meta_data.FieldMetaData("hash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchLibByHash_args.class, metaDataMap);
    }

    public fetchLibByHash_args() {
    }

    public fetchLibByHash_args(
      java.lang.String hash)
    {
      this();
      this.hash = hash;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchLibByHash_args(fetchLibByHash_args other) {
      if (other.isSetHash()) {
        this.hash = other.hash;
      }
    }

    public fetchLibByHash_args deepCopy() {
      return new fetchLibByHash_args(this);
    }

    @Override
    public void clear() {
      this.hash = null;
    }

    public java.lang.String getHash() {
      return this.hash;
    }

    public fetchLibByHash_args setHash(java.lang.String hash) {
      this.hash = hash;
      return this;
    }

    public void unsetHash() {
      this.hash = null;
    }

    /** Returns true if field hash is set (has been assigned a value) and false otherwise */
    public boolean isSetHash() {
      return this.hash != null;
    }

    public void setHashIsSet(boolean value) {
      if (!value) {
        this.hash = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HASH:
        if (value == null) {
          unsetHash();
        } else {
          setHash((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HASH:
        return getHash();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HASH:
        return isSetHash();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchLibByHash_args)
        return this.equals((fetchLibByHash_args)that);
      return false;
    }

    public boolean equals(fetchLibByHash_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hash = true && this.isSetHash();
      boolean that_present_hash = true && that.isSetHash();
      if (this_present_hash || that_present_hash) {
        if (!(this_present_hash && that_present_hash))
          return false;
        if (!this.hash.equals(that.hash))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHash()) ? 131071 : 524287);
      if (isSetHash())
        hashCode = hashCode * 8191 + hash.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchLibByHash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHash()).compareTo(other.isSetHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash, other.hash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchLibByHash_args(");
      boolean first = true;

      sb.append("hash:");
      if (this.hash == null) {
        sb.append("null");
      } else {
        sb.append(this.hash);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchLibByHash_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchLibByHash_argsStandardScheme getScheme() {
        return new fetchLibByHash_argsStandardScheme();
      }
    }

    private static class fetchLibByHash_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchLibByHash_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchLibByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hash = iprot.readString();
                struct.setHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchLibByHash_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hash != null) {
          oprot.writeFieldBegin(HASH_FIELD_DESC);
          oprot.writeString(struct.hash);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchLibByHash_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchLibByHash_argsTupleScheme getScheme() {
        return new fetchLibByHash_argsTupleScheme();
      }
    }

    private static class fetchLibByHash_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchLibByHash_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchLibByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHash()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHash()) {
          oprot.writeString(struct.hash);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchLibByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hash = iprot.readString();
          struct.setHashIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchLibByHash_result implements org.apache.thrift.TBase<fetchLibByHash_result, fetchLibByHash_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchLibByHash_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchLibByHash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchLibByHash_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchLibByHash_resultTupleSchemeFactory();

    public FileInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchLibByHash_result.class, metaDataMap);
    }

    public fetchLibByHash_result() {
    }

    public fetchLibByHash_result(
      FileInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchLibByHash_result(fetchLibByHash_result other) {
      if (other.isSetSuccess()) {
        this.success = new FileInfo(other.success);
      }
    }

    public fetchLibByHash_result deepCopy() {
      return new fetchLibByHash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FileInfo getSuccess() {
      return this.success;
    }

    public fetchLibByHash_result setSuccess(FileInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FileInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchLibByHash_result)
        return this.equals((fetchLibByHash_result)that);
      return false;
    }

    public boolean equals(fetchLibByHash_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchLibByHash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchLibByHash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchLibByHash_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchLibByHash_resultStandardScheme getScheme() {
        return new fetchLibByHash_resultStandardScheme();
      }
    }

    private static class fetchLibByHash_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchLibByHash_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchLibByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FileInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchLibByHash_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchLibByHash_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchLibByHash_resultTupleScheme getScheme() {
        return new fetchLibByHash_resultTupleScheme();
      }
    }

    private static class fetchLibByHash_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchLibByHash_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchLibByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchLibByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FileInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchApkByHash_args implements org.apache.thrift.TBase<fetchApkByHash_args, fetchApkByHash_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchApkByHash_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchApkByHash_args");

    private static final org.apache.thrift.protocol.TField HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("hash", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchApkByHash_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchApkByHash_argsTupleSchemeFactory();

    public java.lang.String hash; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HASH((short)1, "hash");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HASH
            return HASH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HASH, new org.apache.thrift.meta_data.FieldMetaData("hash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchApkByHash_args.class, metaDataMap);
    }

    public fetchApkByHash_args() {
    }

    public fetchApkByHash_args(
      java.lang.String hash)
    {
      this();
      this.hash = hash;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchApkByHash_args(fetchApkByHash_args other) {
      if (other.isSetHash()) {
        this.hash = other.hash;
      }
    }

    public fetchApkByHash_args deepCopy() {
      return new fetchApkByHash_args(this);
    }

    @Override
    public void clear() {
      this.hash = null;
    }

    public java.lang.String getHash() {
      return this.hash;
    }

    public fetchApkByHash_args setHash(java.lang.String hash) {
      this.hash = hash;
      return this;
    }

    public void unsetHash() {
      this.hash = null;
    }

    /** Returns true if field hash is set (has been assigned a value) and false otherwise */
    public boolean isSetHash() {
      return this.hash != null;
    }

    public void setHashIsSet(boolean value) {
      if (!value) {
        this.hash = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HASH:
        if (value == null) {
          unsetHash();
        } else {
          setHash((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HASH:
        return getHash();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HASH:
        return isSetHash();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchApkByHash_args)
        return this.equals((fetchApkByHash_args)that);
      return false;
    }

    public boolean equals(fetchApkByHash_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hash = true && this.isSetHash();
      boolean that_present_hash = true && that.isSetHash();
      if (this_present_hash || that_present_hash) {
        if (!(this_present_hash && that_present_hash))
          return false;
        if (!this.hash.equals(that.hash))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHash()) ? 131071 : 524287);
      if (isSetHash())
        hashCode = hashCode * 8191 + hash.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchApkByHash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHash()).compareTo(other.isSetHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash, other.hash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchApkByHash_args(");
      boolean first = true;

      sb.append("hash:");
      if (this.hash == null) {
        sb.append("null");
      } else {
        sb.append(this.hash);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchApkByHash_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkByHash_argsStandardScheme getScheme() {
        return new fetchApkByHash_argsStandardScheme();
      }
    }

    private static class fetchApkByHash_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchApkByHash_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchApkByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hash = iprot.readString();
                struct.setHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchApkByHash_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hash != null) {
          oprot.writeFieldBegin(HASH_FIELD_DESC);
          oprot.writeString(struct.hash);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchApkByHash_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkByHash_argsTupleScheme getScheme() {
        return new fetchApkByHash_argsTupleScheme();
      }
    }

    private static class fetchApkByHash_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchApkByHash_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchApkByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHash()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHash()) {
          oprot.writeString(struct.hash);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchApkByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hash = iprot.readString();
          struct.setHashIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchApkByHash_result implements org.apache.thrift.TBase<fetchApkByHash_result, fetchApkByHash_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchApkByHash_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchApkByHash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchApkByHash_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchApkByHash_resultTupleSchemeFactory();

    public FileInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchApkByHash_result.class, metaDataMap);
    }

    public fetchApkByHash_result() {
    }

    public fetchApkByHash_result(
      FileInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchApkByHash_result(fetchApkByHash_result other) {
      if (other.isSetSuccess()) {
        this.success = new FileInfo(other.success);
      }
    }

    public fetchApkByHash_result deepCopy() {
      return new fetchApkByHash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FileInfo getSuccess() {
      return this.success;
    }

    public fetchApkByHash_result setSuccess(FileInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FileInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchApkByHash_result)
        return this.equals((fetchApkByHash_result)that);
      return false;
    }

    public boolean equals(fetchApkByHash_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchApkByHash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchApkByHash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchApkByHash_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkByHash_resultStandardScheme getScheme() {
        return new fetchApkByHash_resultStandardScheme();
      }
    }

    private static class fetchApkByHash_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchApkByHash_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchApkByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FileInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchApkByHash_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchApkByHash_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkByHash_resultTupleScheme getScheme() {
        return new fetchApkByHash_resultTupleScheme();
      }
    }

    private static class fetchApkByHash_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchApkByHash_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchApkByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchApkByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FileInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchApkByName_args implements org.apache.thrift.TBase<fetchApkByName_args, fetchApkByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchApkByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchApkByName_args");

    private static final org.apache.thrift.protocol.TField PACKAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("packageName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("versionCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchApkByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchApkByName_argsTupleSchemeFactory();

    public java.lang.String packageName; // required
    public java.lang.String versionCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PACKAGE_NAME((short)1, "packageName"),
      VERSION_CODE((short)2, "versionCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PACKAGE_NAME
            return PACKAGE_NAME;
          case 2: // VERSION_CODE
            return VERSION_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PACKAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("packageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION_CODE, new org.apache.thrift.meta_data.FieldMetaData("versionCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchApkByName_args.class, metaDataMap);
    }

    public fetchApkByName_args() {
    }

    public fetchApkByName_args(
      java.lang.String packageName,
      java.lang.String versionCode)
    {
      this();
      this.packageName = packageName;
      this.versionCode = versionCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchApkByName_args(fetchApkByName_args other) {
      if (other.isSetPackageName()) {
        this.packageName = other.packageName;
      }
      if (other.isSetVersionCode()) {
        this.versionCode = other.versionCode;
      }
    }

    public fetchApkByName_args deepCopy() {
      return new fetchApkByName_args(this);
    }

    @Override
    public void clear() {
      this.packageName = null;
      this.versionCode = null;
    }

    public java.lang.String getPackageName() {
      return this.packageName;
    }

    public fetchApkByName_args setPackageName(java.lang.String packageName) {
      this.packageName = packageName;
      return this;
    }

    public void unsetPackageName() {
      this.packageName = null;
    }

    /** Returns true if field packageName is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageName() {
      return this.packageName != null;
    }

    public void setPackageNameIsSet(boolean value) {
      if (!value) {
        this.packageName = null;
      }
    }

    public java.lang.String getVersionCode() {
      return this.versionCode;
    }

    public fetchApkByName_args setVersionCode(java.lang.String versionCode) {
      this.versionCode = versionCode;
      return this;
    }

    public void unsetVersionCode() {
      this.versionCode = null;
    }

    /** Returns true if field versionCode is set (has been assigned a value) and false otherwise */
    public boolean isSetVersionCode() {
      return this.versionCode != null;
    }

    public void setVersionCodeIsSet(boolean value) {
      if (!value) {
        this.versionCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PACKAGE_NAME:
        if (value == null) {
          unsetPackageName();
        } else {
          setPackageName((java.lang.String)value);
        }
        break;

      case VERSION_CODE:
        if (value == null) {
          unsetVersionCode();
        } else {
          setVersionCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PACKAGE_NAME:
        return getPackageName();

      case VERSION_CODE:
        return getVersionCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PACKAGE_NAME:
        return isSetPackageName();
      case VERSION_CODE:
        return isSetVersionCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchApkByName_args)
        return this.equals((fetchApkByName_args)that);
      return false;
    }

    public boolean equals(fetchApkByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_packageName = true && this.isSetPackageName();
      boolean that_present_packageName = true && that.isSetPackageName();
      if (this_present_packageName || that_present_packageName) {
        if (!(this_present_packageName && that_present_packageName))
          return false;
        if (!this.packageName.equals(that.packageName))
          return false;
      }

      boolean this_present_versionCode = true && this.isSetVersionCode();
      boolean that_present_versionCode = true && that.isSetVersionCode();
      if (this_present_versionCode || that_present_versionCode) {
        if (!(this_present_versionCode && that_present_versionCode))
          return false;
        if (!this.versionCode.equals(that.versionCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPackageName()) ? 131071 : 524287);
      if (isSetPackageName())
        hashCode = hashCode * 8191 + packageName.hashCode();

      hashCode = hashCode * 8191 + ((isSetVersionCode()) ? 131071 : 524287);
      if (isSetVersionCode())
        hashCode = hashCode * 8191 + versionCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchApkByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPackageName()).compareTo(other.isSetPackageName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageName, other.packageName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersionCode()).compareTo(other.isSetVersionCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersionCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionCode, other.versionCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchApkByName_args(");
      boolean first = true;

      sb.append("packageName:");
      if (this.packageName == null) {
        sb.append("null");
      } else {
        sb.append(this.packageName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("versionCode:");
      if (this.versionCode == null) {
        sb.append("null");
      } else {
        sb.append(this.versionCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchApkByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkByName_argsStandardScheme getScheme() {
        return new fetchApkByName_argsStandardScheme();
      }
    }

    private static class fetchApkByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchApkByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchApkByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PACKAGE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.packageName = iprot.readString();
                struct.setPackageNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.versionCode = iprot.readString();
                struct.setVersionCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchApkByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.packageName != null) {
          oprot.writeFieldBegin(PACKAGE_NAME_FIELD_DESC);
          oprot.writeString(struct.packageName);
          oprot.writeFieldEnd();
        }
        if (struct.versionCode != null) {
          oprot.writeFieldBegin(VERSION_CODE_FIELD_DESC);
          oprot.writeString(struct.versionCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchApkByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkByName_argsTupleScheme getScheme() {
        return new fetchApkByName_argsTupleScheme();
      }
    }

    private static class fetchApkByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchApkByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchApkByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPackageName()) {
          optionals.set(0);
        }
        if (struct.isSetVersionCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPackageName()) {
          oprot.writeString(struct.packageName);
        }
        if (struct.isSetVersionCode()) {
          oprot.writeString(struct.versionCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchApkByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.packageName = iprot.readString();
          struct.setPackageNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.versionCode = iprot.readString();
          struct.setVersionCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchApkByName_result implements org.apache.thrift.TBase<fetchApkByName_result, fetchApkByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchApkByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchApkByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchApkByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchApkByName_resultTupleSchemeFactory();

    public FileInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchApkByName_result.class, metaDataMap);
    }

    public fetchApkByName_result() {
    }

    public fetchApkByName_result(
      FileInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchApkByName_result(fetchApkByName_result other) {
      if (other.isSetSuccess()) {
        this.success = new FileInfo(other.success);
      }
    }

    public fetchApkByName_result deepCopy() {
      return new fetchApkByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FileInfo getSuccess() {
      return this.success;
    }

    public fetchApkByName_result setSuccess(FileInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FileInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchApkByName_result)
        return this.equals((fetchApkByName_result)that);
      return false;
    }

    public boolean equals(fetchApkByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchApkByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchApkByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchApkByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkByName_resultStandardScheme getScheme() {
        return new fetchApkByName_resultStandardScheme();
      }
    }

    private static class fetchApkByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchApkByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchApkByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FileInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchApkByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchApkByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkByName_resultTupleScheme getScheme() {
        return new fetchApkByName_resultTupleScheme();
      }
    }

    private static class fetchApkByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchApkByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchApkByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchApkByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FileInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchApkSrcByHash_args implements org.apache.thrift.TBase<fetchApkSrcByHash_args, fetchApkSrcByHash_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchApkSrcByHash_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchApkSrcByHash_args");

    private static final org.apache.thrift.protocol.TField HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("hash", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchApkSrcByHash_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchApkSrcByHash_argsTupleSchemeFactory();

    public java.lang.String hash; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HASH((short)1, "hash");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HASH
            return HASH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HASH, new org.apache.thrift.meta_data.FieldMetaData("hash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchApkSrcByHash_args.class, metaDataMap);
    }

    public fetchApkSrcByHash_args() {
    }

    public fetchApkSrcByHash_args(
      java.lang.String hash)
    {
      this();
      this.hash = hash;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchApkSrcByHash_args(fetchApkSrcByHash_args other) {
      if (other.isSetHash()) {
        this.hash = other.hash;
      }
    }

    public fetchApkSrcByHash_args deepCopy() {
      return new fetchApkSrcByHash_args(this);
    }

    @Override
    public void clear() {
      this.hash = null;
    }

    public java.lang.String getHash() {
      return this.hash;
    }

    public fetchApkSrcByHash_args setHash(java.lang.String hash) {
      this.hash = hash;
      return this;
    }

    public void unsetHash() {
      this.hash = null;
    }

    /** Returns true if field hash is set (has been assigned a value) and false otherwise */
    public boolean isSetHash() {
      return this.hash != null;
    }

    public void setHashIsSet(boolean value) {
      if (!value) {
        this.hash = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HASH:
        if (value == null) {
          unsetHash();
        } else {
          setHash((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HASH:
        return getHash();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HASH:
        return isSetHash();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchApkSrcByHash_args)
        return this.equals((fetchApkSrcByHash_args)that);
      return false;
    }

    public boolean equals(fetchApkSrcByHash_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hash = true && this.isSetHash();
      boolean that_present_hash = true && that.isSetHash();
      if (this_present_hash || that_present_hash) {
        if (!(this_present_hash && that_present_hash))
          return false;
        if (!this.hash.equals(that.hash))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHash()) ? 131071 : 524287);
      if (isSetHash())
        hashCode = hashCode * 8191 + hash.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchApkSrcByHash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHash()).compareTo(other.isSetHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash, other.hash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchApkSrcByHash_args(");
      boolean first = true;

      sb.append("hash:");
      if (this.hash == null) {
        sb.append("null");
      } else {
        sb.append(this.hash);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchApkSrcByHash_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkSrcByHash_argsStandardScheme getScheme() {
        return new fetchApkSrcByHash_argsStandardScheme();
      }
    }

    private static class fetchApkSrcByHash_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchApkSrcByHash_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchApkSrcByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hash = iprot.readString();
                struct.setHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchApkSrcByHash_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hash != null) {
          oprot.writeFieldBegin(HASH_FIELD_DESC);
          oprot.writeString(struct.hash);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchApkSrcByHash_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkSrcByHash_argsTupleScheme getScheme() {
        return new fetchApkSrcByHash_argsTupleScheme();
      }
    }

    private static class fetchApkSrcByHash_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchApkSrcByHash_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchApkSrcByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHash()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHash()) {
          oprot.writeString(struct.hash);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchApkSrcByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hash = iprot.readString();
          struct.setHashIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchApkSrcByHash_result implements org.apache.thrift.TBase<fetchApkSrcByHash_result, fetchApkSrcByHash_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchApkSrcByHash_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchApkSrcByHash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchApkSrcByHash_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchApkSrcByHash_resultTupleSchemeFactory();

    public FileInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchApkSrcByHash_result.class, metaDataMap);
    }

    public fetchApkSrcByHash_result() {
    }

    public fetchApkSrcByHash_result(
      FileInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchApkSrcByHash_result(fetchApkSrcByHash_result other) {
      if (other.isSetSuccess()) {
        this.success = new FileInfo(other.success);
      }
    }

    public fetchApkSrcByHash_result deepCopy() {
      return new fetchApkSrcByHash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FileInfo getSuccess() {
      return this.success;
    }

    public fetchApkSrcByHash_result setSuccess(FileInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FileInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchApkSrcByHash_result)
        return this.equals((fetchApkSrcByHash_result)that);
      return false;
    }

    public boolean equals(fetchApkSrcByHash_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchApkSrcByHash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchApkSrcByHash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchApkSrcByHash_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkSrcByHash_resultStandardScheme getScheme() {
        return new fetchApkSrcByHash_resultStandardScheme();
      }
    }

    private static class fetchApkSrcByHash_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchApkSrcByHash_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchApkSrcByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FileInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchApkSrcByHash_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchApkSrcByHash_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkSrcByHash_resultTupleScheme getScheme() {
        return new fetchApkSrcByHash_resultTupleScheme();
      }
    }

    private static class fetchApkSrcByHash_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchApkSrcByHash_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchApkSrcByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchApkSrcByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FileInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchApkSrcByName_args implements org.apache.thrift.TBase<fetchApkSrcByName_args, fetchApkSrcByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchApkSrcByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchApkSrcByName_args");

    private static final org.apache.thrift.protocol.TField PACKAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("packageName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("versionCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchApkSrcByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchApkSrcByName_argsTupleSchemeFactory();

    public java.lang.String packageName; // required
    public java.lang.String versionCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PACKAGE_NAME((short)1, "packageName"),
      VERSION_CODE((short)2, "versionCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PACKAGE_NAME
            return PACKAGE_NAME;
          case 2: // VERSION_CODE
            return VERSION_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PACKAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("packageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION_CODE, new org.apache.thrift.meta_data.FieldMetaData("versionCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchApkSrcByName_args.class, metaDataMap);
    }

    public fetchApkSrcByName_args() {
    }

    public fetchApkSrcByName_args(
      java.lang.String packageName,
      java.lang.String versionCode)
    {
      this();
      this.packageName = packageName;
      this.versionCode = versionCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchApkSrcByName_args(fetchApkSrcByName_args other) {
      if (other.isSetPackageName()) {
        this.packageName = other.packageName;
      }
      if (other.isSetVersionCode()) {
        this.versionCode = other.versionCode;
      }
    }

    public fetchApkSrcByName_args deepCopy() {
      return new fetchApkSrcByName_args(this);
    }

    @Override
    public void clear() {
      this.packageName = null;
      this.versionCode = null;
    }

    public java.lang.String getPackageName() {
      return this.packageName;
    }

    public fetchApkSrcByName_args setPackageName(java.lang.String packageName) {
      this.packageName = packageName;
      return this;
    }

    public void unsetPackageName() {
      this.packageName = null;
    }

    /** Returns true if field packageName is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageName() {
      return this.packageName != null;
    }

    public void setPackageNameIsSet(boolean value) {
      if (!value) {
        this.packageName = null;
      }
    }

    public java.lang.String getVersionCode() {
      return this.versionCode;
    }

    public fetchApkSrcByName_args setVersionCode(java.lang.String versionCode) {
      this.versionCode = versionCode;
      return this;
    }

    public void unsetVersionCode() {
      this.versionCode = null;
    }

    /** Returns true if field versionCode is set (has been assigned a value) and false otherwise */
    public boolean isSetVersionCode() {
      return this.versionCode != null;
    }

    public void setVersionCodeIsSet(boolean value) {
      if (!value) {
        this.versionCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PACKAGE_NAME:
        if (value == null) {
          unsetPackageName();
        } else {
          setPackageName((java.lang.String)value);
        }
        break;

      case VERSION_CODE:
        if (value == null) {
          unsetVersionCode();
        } else {
          setVersionCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PACKAGE_NAME:
        return getPackageName();

      case VERSION_CODE:
        return getVersionCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PACKAGE_NAME:
        return isSetPackageName();
      case VERSION_CODE:
        return isSetVersionCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchApkSrcByName_args)
        return this.equals((fetchApkSrcByName_args)that);
      return false;
    }

    public boolean equals(fetchApkSrcByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_packageName = true && this.isSetPackageName();
      boolean that_present_packageName = true && that.isSetPackageName();
      if (this_present_packageName || that_present_packageName) {
        if (!(this_present_packageName && that_present_packageName))
          return false;
        if (!this.packageName.equals(that.packageName))
          return false;
      }

      boolean this_present_versionCode = true && this.isSetVersionCode();
      boolean that_present_versionCode = true && that.isSetVersionCode();
      if (this_present_versionCode || that_present_versionCode) {
        if (!(this_present_versionCode && that_present_versionCode))
          return false;
        if (!this.versionCode.equals(that.versionCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPackageName()) ? 131071 : 524287);
      if (isSetPackageName())
        hashCode = hashCode * 8191 + packageName.hashCode();

      hashCode = hashCode * 8191 + ((isSetVersionCode()) ? 131071 : 524287);
      if (isSetVersionCode())
        hashCode = hashCode * 8191 + versionCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchApkSrcByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPackageName()).compareTo(other.isSetPackageName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageName, other.packageName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersionCode()).compareTo(other.isSetVersionCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersionCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionCode, other.versionCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchApkSrcByName_args(");
      boolean first = true;

      sb.append("packageName:");
      if (this.packageName == null) {
        sb.append("null");
      } else {
        sb.append(this.packageName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("versionCode:");
      if (this.versionCode == null) {
        sb.append("null");
      } else {
        sb.append(this.versionCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchApkSrcByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkSrcByName_argsStandardScheme getScheme() {
        return new fetchApkSrcByName_argsStandardScheme();
      }
    }

    private static class fetchApkSrcByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchApkSrcByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchApkSrcByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PACKAGE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.packageName = iprot.readString();
                struct.setPackageNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.versionCode = iprot.readString();
                struct.setVersionCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchApkSrcByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.packageName != null) {
          oprot.writeFieldBegin(PACKAGE_NAME_FIELD_DESC);
          oprot.writeString(struct.packageName);
          oprot.writeFieldEnd();
        }
        if (struct.versionCode != null) {
          oprot.writeFieldBegin(VERSION_CODE_FIELD_DESC);
          oprot.writeString(struct.versionCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchApkSrcByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkSrcByName_argsTupleScheme getScheme() {
        return new fetchApkSrcByName_argsTupleScheme();
      }
    }

    private static class fetchApkSrcByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchApkSrcByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchApkSrcByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPackageName()) {
          optionals.set(0);
        }
        if (struct.isSetVersionCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPackageName()) {
          oprot.writeString(struct.packageName);
        }
        if (struct.isSetVersionCode()) {
          oprot.writeString(struct.versionCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchApkSrcByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.packageName = iprot.readString();
          struct.setPackageNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.versionCode = iprot.readString();
          struct.setVersionCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchApkSrcByName_result implements org.apache.thrift.TBase<fetchApkSrcByName_result, fetchApkSrcByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchApkSrcByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchApkSrcByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchApkSrcByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchApkSrcByName_resultTupleSchemeFactory();

    public FileInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchApkSrcByName_result.class, metaDataMap);
    }

    public fetchApkSrcByName_result() {
    }

    public fetchApkSrcByName_result(
      FileInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchApkSrcByName_result(fetchApkSrcByName_result other) {
      if (other.isSetSuccess()) {
        this.success = new FileInfo(other.success);
      }
    }

    public fetchApkSrcByName_result deepCopy() {
      return new fetchApkSrcByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FileInfo getSuccess() {
      return this.success;
    }

    public fetchApkSrcByName_result setSuccess(FileInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FileInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchApkSrcByName_result)
        return this.equals((fetchApkSrcByName_result)that);
      return false;
    }

    public boolean equals(fetchApkSrcByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchApkSrcByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchApkSrcByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchApkSrcByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkSrcByName_resultStandardScheme getScheme() {
        return new fetchApkSrcByName_resultStandardScheme();
      }
    }

    private static class fetchApkSrcByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchApkSrcByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchApkSrcByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FileInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchApkSrcByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchApkSrcByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchApkSrcByName_resultTupleScheme getScheme() {
        return new fetchApkSrcByName_resultTupleScheme();
      }
    }

    private static class fetchApkSrcByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchApkSrcByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchApkSrcByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchApkSrcByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FileInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
